# yaml stands for "YAML Ain't Markup Language", Yet Another Markup Language
name: CI/CD Pipeline



on:
  push:
    branches:
        - main
        - any-feature-branch



jobs:
    
    job1:
        runs-on: ubuntu-latest # can even have macos-latest or windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4  # v4 is the version of the action we're using, not the branch of the code; https://github.com/actions/checkout 
        # purpose of checkout code is to get the code from the repository, and put it in the runner machine
        
            - name: Set up Python
              uses: actions/setup-python@v5  # v4 is the version of the action we're using, not the branch of the code;
              with:
                python-version: '3.10'  # Specify the Python version you want to use

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r session_6_CI/requirements.txt  # Install dependencies from requirements.txt
            
            - name: Run tests
              run: |
                    pytest



    job2:
        needs: job1  # This job will run after job1 completes successfully  [lint, test-unit]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4  # v4 is the version of the action we're using, not the branch of the code;
            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_USERNAME }}  # Replace with your Docker Hub username
                password: ${{ secrets.DOCKER_PASSWORD }} # Use a secret for the password in production
            - name: Build Docker image
              uses: docker/build-push-action@v6
              with:
                push: true
                tags: shivam13juna/ci_cd_demo:latest  # Replace with your Docker Hub username and image name


    job3:
      needs: job1
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2  # Replace with your desired AWS region

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: cicd-ecs-repo
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: session_7_CD/cicd-ecs-task-revision1.json
            container-name: cicd-ecs-container
            image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: cicd-ecs-service
            cluster: cicd-ecs-cluster-v2
            wait-for-service-stability: true

